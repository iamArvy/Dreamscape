// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.3
//   protoc               v3.21.12
// source: auth.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import type { handleUnaryCall, UntypedServiceImplementation } from "@grpc/grpc-js";
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";
import { Empty } from "./google/protobuf/empty";

export const protobufPackage = "auth";

export interface Status {
  success: boolean;
}

export interface RegisterData {
  userId: string;
  email: string;
  password: string;
}

export interface RegisterRequest {
  data: RegisterData | undefined;
  userAgent: string;
  ipAddress: string;
}

export interface AuthResponse {
  access: AuthToken | undefined;
  refresh: AuthToken | undefined;
}

export interface AuthToken {
  token: string;
  expiresIn: number;
}

export interface ChangePasswordData {
  oldPassword: string;
  newPassword: string;
}

export interface ChangePasswordRequest {
  id: string;
  data: ChangePasswordData | undefined;
}

export interface RequestPasswordResetMessage {
  id: string;
  email: string;
}

export interface ResetPasswordMessage {
  token: string;
  password: string;
}

export interface EmailData {
  email: string;
}

export interface ChangeEmailRequest {
  id: string;
  data: EmailData | undefined;
}

export interface TokenRequest {
  token: string;
}

export interface IsEmailVerifiedResponse {
  verified: boolean;
}

export interface LoginData {
  email: string;
  password: string;
}

export interface LoginRequest {
  data: LoginData | undefined;
  userAgent: string;
  ipAddress: string;
}

export const AUTH_PACKAGE_NAME = "auth";

function createBaseStatus(): Status {
  return { success: false };
}

export const Status: MessageFns<Status> = {
  encode(message: Status, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.success !== false) {
      writer.uint32(8).bool(message.success);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Status {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStatus();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.success = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

function createBaseRegisterData(): RegisterData {
  return { userId: "", email: "", password: "" };
}

export const RegisterData: MessageFns<RegisterData> = {
  encode(message: RegisterData, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.userId !== "") {
      writer.uint32(10).string(message.userId);
    }
    if (message.email !== "") {
      writer.uint32(18).string(message.email);
    }
    if (message.password !== "") {
      writer.uint32(26).string(message.password);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RegisterData {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRegisterData();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.userId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.email = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.password = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

function createBaseRegisterRequest(): RegisterRequest {
  return { data: undefined, userAgent: "", ipAddress: "" };
}

export const RegisterRequest: MessageFns<RegisterRequest> = {
  encode(message: RegisterRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.data !== undefined) {
      RegisterData.encode(message.data, writer.uint32(10).fork()).join();
    }
    if (message.userAgent !== "") {
      writer.uint32(18).string(message.userAgent);
    }
    if (message.ipAddress !== "") {
      writer.uint32(26).string(message.ipAddress);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RegisterRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRegisterRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.data = RegisterData.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.userAgent = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.ipAddress = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

function createBaseAuthResponse(): AuthResponse {
  return { access: undefined, refresh: undefined };
}

export const AuthResponse: MessageFns<AuthResponse> = {
  encode(message: AuthResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.access !== undefined) {
      AuthToken.encode(message.access, writer.uint32(10).fork()).join();
    }
    if (message.refresh !== undefined) {
      AuthToken.encode(message.refresh, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AuthResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAuthResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.access = AuthToken.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.refresh = AuthToken.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

function createBaseAuthToken(): AuthToken {
  return { token: "", expiresIn: 0 };
}

export const AuthToken: MessageFns<AuthToken> = {
  encode(message: AuthToken, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.token !== "") {
      writer.uint32(10).string(message.token);
    }
    if (message.expiresIn !== 0) {
      writer.uint32(16).int32(message.expiresIn);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AuthToken {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAuthToken();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.token = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.expiresIn = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

function createBaseChangePasswordData(): ChangePasswordData {
  return { oldPassword: "", newPassword: "" };
}

export const ChangePasswordData: MessageFns<ChangePasswordData> = {
  encode(message: ChangePasswordData, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.oldPassword !== "") {
      writer.uint32(10).string(message.oldPassword);
    }
    if (message.newPassword !== "") {
      writer.uint32(18).string(message.newPassword);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ChangePasswordData {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseChangePasswordData();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.oldPassword = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.newPassword = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

function createBaseChangePasswordRequest(): ChangePasswordRequest {
  return { id: "", data: undefined };
}

export const ChangePasswordRequest: MessageFns<ChangePasswordRequest> = {
  encode(message: ChangePasswordRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.data !== undefined) {
      ChangePasswordData.encode(message.data, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ChangePasswordRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseChangePasswordRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.data = ChangePasswordData.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

function createBaseRequestPasswordResetMessage(): RequestPasswordResetMessage {
  return { id: "", email: "" };
}

export const RequestPasswordResetMessage: MessageFns<RequestPasswordResetMessage> = {
  encode(message: RequestPasswordResetMessage, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.email !== "") {
      writer.uint32(18).string(message.email);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RequestPasswordResetMessage {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRequestPasswordResetMessage();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.email = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

function createBaseResetPasswordMessage(): ResetPasswordMessage {
  return { token: "", password: "" };
}

export const ResetPasswordMessage: MessageFns<ResetPasswordMessage> = {
  encode(message: ResetPasswordMessage, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.token !== "") {
      writer.uint32(10).string(message.token);
    }
    if (message.password !== "") {
      writer.uint32(18).string(message.password);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ResetPasswordMessage {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseResetPasswordMessage();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.token = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.password = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

function createBaseEmailData(): EmailData {
  return { email: "" };
}

export const EmailData: MessageFns<EmailData> = {
  encode(message: EmailData, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.email !== "") {
      writer.uint32(10).string(message.email);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): EmailData {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEmailData();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.email = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

function createBaseChangeEmailRequest(): ChangeEmailRequest {
  return { id: "", data: undefined };
}

export const ChangeEmailRequest: MessageFns<ChangeEmailRequest> = {
  encode(message: ChangeEmailRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.data !== undefined) {
      EmailData.encode(message.data, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ChangeEmailRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseChangeEmailRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.data = EmailData.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

function createBaseTokenRequest(): TokenRequest {
  return { token: "" };
}

export const TokenRequest: MessageFns<TokenRequest> = {
  encode(message: TokenRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.token !== "") {
      writer.uint32(10).string(message.token);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TokenRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTokenRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.token = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

function createBaseIsEmailVerifiedResponse(): IsEmailVerifiedResponse {
  return { verified: false };
}

export const IsEmailVerifiedResponse: MessageFns<IsEmailVerifiedResponse> = {
  encode(message: IsEmailVerifiedResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.verified !== false) {
      writer.uint32(8).bool(message.verified);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): IsEmailVerifiedResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseIsEmailVerifiedResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.verified = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

function createBaseLoginData(): LoginData {
  return { email: "", password: "" };
}

export const LoginData: MessageFns<LoginData> = {
  encode(message: LoginData, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.email !== "") {
      writer.uint32(10).string(message.email);
    }
    if (message.password !== "") {
      writer.uint32(18).string(message.password);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): LoginData {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLoginData();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.email = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.password = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

function createBaseLoginRequest(): LoginRequest {
  return { data: undefined, userAgent: "", ipAddress: "" };
}

export const LoginRequest: MessageFns<LoginRequest> = {
  encode(message: LoginRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.data !== undefined) {
      LoginData.encode(message.data, writer.uint32(10).fork()).join();
    }
    if (message.userAgent !== "") {
      writer.uint32(18).string(message.userAgent);
    }
    if (message.ipAddress !== "") {
      writer.uint32(26).string(message.ipAddress);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): LoginRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLoginRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.data = LoginData.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.userAgent = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.ipAddress = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

export interface AuthServiceClient {
  health(request: Empty): Observable<Status>;

  /** Credential-related */

  register(request: RegisterRequest): Observable<AuthResponse>;

  changePassword(request: ChangePasswordRequest): Observable<Status>;

  changeEmail(request: ChangeEmailRequest): Observable<Status>;

  requestPasswordResetToken(request: RequestPasswordResetMessage): Observable<Status>;

  resetPassword(request: ResetPasswordMessage): Observable<Status>;

  /** Email verification */

  requestEmailVerification(request: EmailData): Observable<Status>;

  verifyEmail(request: TokenRequest): Observable<Status>;

  /** Login / Token */

  login(request: LoginRequest): Observable<AuthResponse>;

  refreshToken(request: TokenRequest): Observable<AuthToken>;

  logout(request: TokenRequest): Observable<Status>;
}

export interface AuthServiceController {
  health(request: Empty): Promise<Status> | Observable<Status> | Status;

  /** Credential-related */

  register(request: RegisterRequest): Promise<AuthResponse> | Observable<AuthResponse> | AuthResponse;

  changePassword(request: ChangePasswordRequest): Promise<Status> | Observable<Status> | Status;

  changeEmail(request: ChangeEmailRequest): Promise<Status> | Observable<Status> | Status;

  requestPasswordResetToken(request: RequestPasswordResetMessage): Promise<Status> | Observable<Status> | Status;

  resetPassword(request: ResetPasswordMessage): Promise<Status> | Observable<Status> | Status;

  /** Email verification */

  requestEmailVerification(request: EmailData): Promise<Status> | Observable<Status> | Status;

  verifyEmail(request: TokenRequest): Promise<Status> | Observable<Status> | Status;

  /** Login / Token */

  login(request: LoginRequest): Promise<AuthResponse> | Observable<AuthResponse> | AuthResponse;

  refreshToken(request: TokenRequest): Promise<AuthToken> | Observable<AuthToken> | AuthToken;

  logout(request: TokenRequest): Promise<Status> | Observable<Status> | Status;
}

export function AuthServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = [
      "health",
      "register",
      "changePassword",
      "changeEmail",
      "requestPasswordResetToken",
      "resetPassword",
      "requestEmailVerification",
      "verifyEmail",
      "login",
      "refreshToken",
      "logout",
    ];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("AuthService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("AuthService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const AUTH_SERVICE_NAME = "AuthService";

export type AuthServiceService = typeof AuthServiceService;
export const AuthServiceService = {
  health: {
    path: "/auth.AuthService/Health",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: Empty): Buffer => Buffer.from(Empty.encode(value).finish()),
    requestDeserialize: (value: Buffer): Empty => Empty.decode(value),
    responseSerialize: (value: Status): Buffer => Buffer.from(Status.encode(value).finish()),
    responseDeserialize: (value: Buffer): Status => Status.decode(value),
  },
  /** Credential-related */
  register: {
    path: "/auth.AuthService/Register",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: RegisterRequest): Buffer => Buffer.from(RegisterRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer): RegisterRequest => RegisterRequest.decode(value),
    responseSerialize: (value: AuthResponse): Buffer => Buffer.from(AuthResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer): AuthResponse => AuthResponse.decode(value),
  },
  changePassword: {
    path: "/auth.AuthService/ChangePassword",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: ChangePasswordRequest): Buffer =>
      Buffer.from(ChangePasswordRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer): ChangePasswordRequest => ChangePasswordRequest.decode(value),
    responseSerialize: (value: Status): Buffer => Buffer.from(Status.encode(value).finish()),
    responseDeserialize: (value: Buffer): Status => Status.decode(value),
  },
  changeEmail: {
    path: "/auth.AuthService/ChangeEmail",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: ChangeEmailRequest): Buffer => Buffer.from(ChangeEmailRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer): ChangeEmailRequest => ChangeEmailRequest.decode(value),
    responseSerialize: (value: Status): Buffer => Buffer.from(Status.encode(value).finish()),
    responseDeserialize: (value: Buffer): Status => Status.decode(value),
  },
  requestPasswordResetToken: {
    path: "/auth.AuthService/requestPasswordResetToken",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: RequestPasswordResetMessage): Buffer =>
      Buffer.from(RequestPasswordResetMessage.encode(value).finish()),
    requestDeserialize: (value: Buffer): RequestPasswordResetMessage => RequestPasswordResetMessage.decode(value),
    responseSerialize: (value: Status): Buffer => Buffer.from(Status.encode(value).finish()),
    responseDeserialize: (value: Buffer): Status => Status.decode(value),
  },
  resetPassword: {
    path: "/auth.AuthService/resetPassword",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: ResetPasswordMessage): Buffer => Buffer.from(ResetPasswordMessage.encode(value).finish()),
    requestDeserialize: (value: Buffer): ResetPasswordMessage => ResetPasswordMessage.decode(value),
    responseSerialize: (value: Status): Buffer => Buffer.from(Status.encode(value).finish()),
    responseDeserialize: (value: Buffer): Status => Status.decode(value),
  },
  /** Email verification */
  requestEmailVerification: {
    path: "/auth.AuthService/RequestEmailVerification",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: EmailData): Buffer => Buffer.from(EmailData.encode(value).finish()),
    requestDeserialize: (value: Buffer): EmailData => EmailData.decode(value),
    responseSerialize: (value: Status): Buffer => Buffer.from(Status.encode(value).finish()),
    responseDeserialize: (value: Buffer): Status => Status.decode(value),
  },
  verifyEmail: {
    path: "/auth.AuthService/VerifyEmail",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: TokenRequest): Buffer => Buffer.from(TokenRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer): TokenRequest => TokenRequest.decode(value),
    responseSerialize: (value: Status): Buffer => Buffer.from(Status.encode(value).finish()),
    responseDeserialize: (value: Buffer): Status => Status.decode(value),
  },
  /** Login / Token */
  login: {
    path: "/auth.AuthService/Login",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: LoginRequest): Buffer => Buffer.from(LoginRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer): LoginRequest => LoginRequest.decode(value),
    responseSerialize: (value: AuthResponse): Buffer => Buffer.from(AuthResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer): AuthResponse => AuthResponse.decode(value),
  },
  refreshToken: {
    path: "/auth.AuthService/RefreshToken",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: TokenRequest): Buffer => Buffer.from(TokenRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer): TokenRequest => TokenRequest.decode(value),
    responseSerialize: (value: AuthToken): Buffer => Buffer.from(AuthToken.encode(value).finish()),
    responseDeserialize: (value: Buffer): AuthToken => AuthToken.decode(value),
  },
  logout: {
    path: "/auth.AuthService/Logout",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: TokenRequest): Buffer => Buffer.from(TokenRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer): TokenRequest => TokenRequest.decode(value),
    responseSerialize: (value: Status): Buffer => Buffer.from(Status.encode(value).finish()),
    responseDeserialize: (value: Buffer): Status => Status.decode(value),
  },
} as const;

export interface AuthServiceServer extends UntypedServiceImplementation {
  health: handleUnaryCall<Empty, Status>;
  /** Credential-related */
  register: handleUnaryCall<RegisterRequest, AuthResponse>;
  changePassword: handleUnaryCall<ChangePasswordRequest, Status>;
  changeEmail: handleUnaryCall<ChangeEmailRequest, Status>;
  requestPasswordResetToken: handleUnaryCall<RequestPasswordResetMessage, Status>;
  resetPassword: handleUnaryCall<ResetPasswordMessage, Status>;
  /** Email verification */
  requestEmailVerification: handleUnaryCall<EmailData, Status>;
  verifyEmail: handleUnaryCall<TokenRequest, Status>;
  /** Login / Token */
  login: handleUnaryCall<LoginRequest, AuthResponse>;
  refreshToken: handleUnaryCall<TokenRequest, AuthToken>;
  logout: handleUnaryCall<TokenRequest, Status>;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
}
